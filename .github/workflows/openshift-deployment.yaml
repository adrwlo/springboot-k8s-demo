name: OpenShift Deployment

on:
  push:
    branches:
      - openshift-deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-k8s-demo:latest .

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/springboot-k8s-demo:latest

    - name: Install OpenShift CLI
      run: |
        curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
        tar -xzf oc.tar.gz
        sudo mv oc /usr/local/bin/
        oc version

    - name: Login to OpenShift
      env:
        OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
        OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
      run: |
        oc login "$OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify=true

    - name: Deploy or Update App (create svc/route if missing)
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
      run: |
        set -euo pipefail

        APP_NAME="springboot-k8s-demo"
        IMG="docker.io/${DOCKER_USERNAME}/${APP_NAME}:latest"

        oc project "${OPENSHIFT_PROJECT}"

        # Helper: check if deployment or dc exists
        has_deployment() { oc get deployment "${APP_NAME}" >/dev/null 2>&1; }
        has_dc() { oc get dc "${APP_NAME}" >/dev/null 2>&1; }
        has_svc() { oc get svc "${APP_NAME}" >/dev/null 2>&1; }
        has_route() { oc get route "${APP_NAME}" >/dev/null 2>&1; }

        if has_deployment || has_dc; then
          echo "‚úÖ Application exists ‚Äî updating image and restarting rollout..."

          # Try to set image on deployment, fallback to dc
          if has_deployment; then
            echo " - Updating Deployment image..."
            oc set image deployment/"${APP_NAME}" "${APP_NAME}"="${IMG}"
            echo " - Restarting Deployment rollout..."
            oc rollout restart deployment/"${APP_NAME}"
          else
            echo " - Updating DeploymentConfig image..."
            oc set image dc/"${APP_NAME}" "${APP_NAME}"="${IMG}"
            echo " - Restarting DC rollout..."
            oc rollout restart dc/"${APP_NAME}"
          fi

          # Ensure Service exists (create from deployment or dc if missing)
          if ! has_svc; then
            echo "‚ÑπÔ∏è Service not found ‚Äî creating Service from existing workload..."
            if has_deployment; then
              oc expose deployment "${APP_NAME}" --port=8080 || true
            else
              # expose dc -> creates svc in older OpenShift; if fails, create svc via oc create service
              oc expose dc "${APP_NAME}" --port=8080 || true
            fi
          fi

          # Ensure Route exists
          if ! has_route; then
            echo "‚ÑπÔ∏è Route not found ‚Äî exposing service to create Route..."
            oc expose svc "${APP_NAME}" || true
          fi

        else
          echo "üöÄ Application does not exist ‚Äî creating from image..."
          oc new-app "${IMG}" --name="${APP_NAME}"
          # create service from deployment (oc new-app may create deployment or dc)
          # try both - expose deployment first, fallback to dc, then expose svc -> route
          oc expose deployment "${APP_NAME}" --port=8080 || true
          oc expose dc "${APP_NAME}" --port=8080 || true
          # create route from svc
          oc expose svc "${APP_NAME}" || true
        fi

    - name: Wait for Route and print URL
      env:
        OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
      run: |
        set -euo pipefail
        APP_NAME="springboot-k8s-demo"
        oc project "${OPENSHIFT_PROJECT}"

        # ensure svc exists (final safety)
        if ! oc get svc "${APP_NAME}" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Service still missing ‚Äî attempting to create from deployment/dc..."
          if oc get deployment "${APP_NAME}" >/dev/null 2>&1; then
            oc expose deployment "${APP_NAME}" --port=8080 || true
          elif oc get dc "${APP_NAME}" >/dev/null 2>&1; then
            oc expose dc "${APP_NAME}" --port=8080 || true
          fi
        fi

        # create route if missing
        if ! oc get route "${APP_NAME}" >/dev/null 2>&1; then
          echo "‚ÑπÔ∏è Creating route..."
          oc expose svc "${APP_NAME}" || true
        fi

        # wait for route to appear
        echo "‚è≥ Waiting for route to be available..."
        for i in {1..20}; do
          if oc get route "${APP_NAME}" >/dev/null 2>&1; then
            break
          fi
          sleep 3
          echo "‚è≥ attempt $i..."
        done

        if ! oc get route "${APP_NAME}" >/dev/null 2>&1; then
          echo "‚ùå Route still not found after wait ‚Äî aborting."
          oc get all || true
          exit 1
        fi

        APP_URL=$(oc get route "${APP_NAME}" -o jsonpath='http://{.spec.host}')
        echo "‚úÖ Application URL: ${APP_URL}"
