name: OpenShift Deployment

on:
  push:
    branches:
      - openshift-deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-k8s-demo:latest .

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/springboot-k8s-demo:latest

    - name: Install OpenShift CLI
      run: |
        curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
        tar -xzf oc.tar.gz
        sudo mv oc /usr/local/bin/

    - name: Login to OpenShift
      run: oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }} --insecure-skip-tls-verify=true

    - name: Set OpenShift project
      run: oc project ${{ secrets.OPENSHIFT_PROJECT }}

    - name: Deploy application (update or create)
      run: |
        # Sprawd≈∫, czy deployment istnieje
        if oc get deployment springboot-k8s-demo; then
          echo "Deployment istnieje, aktualizujƒô obraz"
          oc set image deployment/springboot-k8s-demo springboot-k8s-demo=${{ secrets.DOCKER_USERNAME }}/springboot-k8s-demo:latest
          oc rollout restart deployment/springboot-k8s-demo
        else
          echo "Deployment nie istnieje, tworzƒô nowy"
          oc new-app ${{ secrets.DOCKER_USERNAME }}/springboot-k8s-demo:latest --name=springboot-k8s-demo
        fi

    - name: Expose Service as Route
      run: |
        if oc get route springboot-k8s-demo; then
          echo "Route istnieje"
        else
          echo "Tworzƒô Route"
          oc expose svc/springboot-k8s-demo
        fi

    - name: Get and show public route URL
      id: get_route
      run: |
        ROUTE=$(oc get route springboot-k8s-demo -o jsonpath='{.spec.host}')
        echo "üåç Publiczny adres aplikacji: http://$ROUTE"
        echo "::set-output name=app_url::http://$ROUTE"

    # (Opcjonalnie) mo≈ºesz zapisaƒá URL do pliku lub dalej przekazaƒá go do innych krok√≥w
